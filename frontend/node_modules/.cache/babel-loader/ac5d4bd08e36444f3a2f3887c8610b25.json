{"ast":null,"code":"var _jsxFileName = \"/Users/alva/Downloads/Github/trivia_api/frontend/src/components/QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"/questions?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {// this.setState({\n          //   questions: result.questions,\n          //   totalQuestions: result.total_questions,\n          //   categories: result.categories,\n          //   currentCategory: result.current_category })\n          // return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: \"/categories/\".concat(id, \"/questions\"),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: \"/questions\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return (// <div className=\"question-view\">\n      // <div className=\"categories-list\">\n      //   <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n      //   <ul>\n      //     {Object.keys(this.state.categories).map((id, ) => (\n      //       <li key={id} onClick={() => {this.getByCategory(id)}}>\n      //         {this.state.categories[id]}\n      //         <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\n      //       </li>\n      //     ))}\n      //   </ul>\n      //   <Search submitSearch={this.submitSearch}/>\n      // </div>\n      // <div className=\"questions-list\">\n      //   <h2>Questions</h2>\n      //   {this.state.questions.map((q, ind) => (\n      //     <Question\n      //       key={q.id}\n      //       question={q.question}\n      //       answer={q.answer}\n      //       category={this.state.categories[q.category]} \n      //       difficulty={q.difficulty}\n      //       questionAction={this.questionAction(q.id)}\n      //     />\n      //   ))}\n      //   <div className=\"pagination-menu\">\n      //     {this.createPagination()}\n      //   </div>\n      // </div>\n      // </div>\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Hello World\")\n    );\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["/Users/alva/Downloads/Github/trivia_api/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","error","alert","getByCategory","id","setState","questions","totalQuestions","total_questions","currentCategory","current_category","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","categories","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `/questions?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        // this.setState({\n        //   questions: result.questions,\n        //   totalQuestions: result.total_questions,\n        //   categories: result.categories,\n        //   currentCategory: result.current_category })\n        // return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: `/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    $.ajax({\n      url: `/questions`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      // <div className=\"question-view\">\n        // <div className=\"categories-list\">\n        //   <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n        //   <ul>\n        //     {Object.keys(this.state.categories).map((id, ) => (\n        //       <li key={id} onClick={() => {this.getByCategory(id)}}>\n        //         {this.state.categories[id]}\n        //         <img className=\"category\" src={`${this.state.categories[id]}.svg`}/>\n        //       </li>\n        //     ))}\n        //   </ul>\n        //   <Search submitSearch={this.submitSearch}/>\n        // </div>\n        // <div className=\"questions-list\">\n        //   <h2>Questions</h2>\n        //   {this.state.questions.map((q, ind) => (\n        //     <Question\n        //       key={q.id}\n        //       question={q.question}\n        //       answer={q.answer}\n        //       category={this.state.categories[q.category]} \n        //       difficulty={q.difficulty}\n        //       questionAction={this.questionAction(q.id)}\n        //     />\n        //   ))}\n        //   <div className=\"pagination-menu\">\n        //     {this.createPagination()}\n        //   </div>\n        // </div>\n\n      // </div>\n      <div>Hello World</div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}